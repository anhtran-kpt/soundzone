// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/app/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  USER
  ADMIN
}

enum AlbumType {
  ALBUM
  SINGLE
  EP
}

enum ArtistRole {
  OWNER
  FEATURED
}

enum PlaylistType {
  PUBLIC
  PRIVATE
}

model User {
  id             String          @id @default(cuid())
  name           String
  email          String          @unique
  password       String
  image          String?
  role           UserRole        @default(USER)
  lastLoginAt    DateTime?
  following      Artist[]        @relation("UserFollowing")
  playlists      Playlist[]
  playHistory    PlayHistory[]
  likedSongs     LikedSong[]
  likedAlbums    LikedAlbum[]
  likedPlaylists LikedPlaylist[]
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt

  @@index([email])
}

model Artist {
  id               String    @id @default(cuid())
  name             String
  slug             String    @unique
  bio              String?   @db.Text
  dateOfBirth      DateTime?
  nationality      String?
  coverImage       String?
  monthlyListeners Int       @default(0)
  songs            Song[]
  albums           Album[]
  followers        User[]    @relation("UserFollowing")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([slug])
}

model Song {
  id          String    @id @default(cuid())
  title       String
  slug        String    @unique
  lyrics      String?   @db.Text
  duration    Int
  releaseDate DateTime?
  playCount   Int       @default(0)

  isExplicit Boolean @default(false)
  audioUrl   String
  coverImage String?

  artists     Artist[]
  composers   String[]
  producers   String[]
  lyricists   String[]
  album       Album         @relation(fields: [albumId], references: [id])
  albumId     String
  genres      Genre[]
  playlists   Playlist[]
  playHistory PlayHistory[]
  likedBy     LikedSong[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([slug])
  @@index([albumId])
}

model Album {
  id          String    @id @default(cuid())
  title       String
  description String?   @db.Text
  slug        String    @unique
  type        AlbumType @default(ALBUM)
  duration    Int
  releaseDate DateTime?
  playCount   Int       @default(0)
  coverImage  String?
  isExplicit  Boolean   @default(false)

  songs    Song[]
  artist   Artist?      @relation(fields: [artistId], references: [id])
  artistId String?
  likedBy  LikedAlbum[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([slug])
  @@index([artistId])
}

model Playlist {
  id          String          @id @default(cuid())
  title       String
  description String?         @db.Text
  slug        String          @unique
  duration    Int             @default(0)
  releaseDate DateTime?
  type        PlaylistType    @default(PUBLIC)
  coverImage  String?
  songs       Song[]
  user        User?           @relation(fields: [userId], references: [id])
  userId      String?
  likedBy     LikedPlaylist[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([slug])
  @@index([userId])
}

model Genre {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?  @db.Text
  slug        String   @unique
  songs       Song[]
  songCount   Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([slug])
}

model PlayHistory {
  id       String   @id @default(cuid())
  song     Song     @relation(fields: [songId], references: [id])
  songId   String
  user     User     @relation(fields: [userId], references: [id])
  userId   String
  playedAt DateTime @default(now())

  @@index([userId])
  @@index([songId])
}

model LikedSong {
  id      String   @id @default(cuid())
  song    Song     @relation(fields: [songId], references: [id])
  songId  String
  user    User     @relation(fields: [userId], references: [id])
  userId  String
  likedAt DateTime @default(now())

  @@unique([userId, songId])
  @@index([userId])
  @@index([songId])
}

model LikedAlbum {
  id      String   @id @default(cuid())
  album   Album    @relation(fields: [albumId], references: [id])
  albumId String
  user    User     @relation(fields: [userId], references: [id])
  userId  String
  likedAt DateTime @default(now())

  @@unique([userId, albumId])
  @@index([userId])
  @@index([albumId])
}

model LikedPlaylist {
  id         String   @id @default(cuid())
  playlist   Playlist @relation(fields: [playlistId], references: [id])
  playlistId String
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  likedAt    DateTime @default(now())

  @@unique([userId, playlistId])
  @@index([userId])
  @@index([playlistId])
}
