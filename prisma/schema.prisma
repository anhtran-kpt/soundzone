// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/app/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  USER
  ADMIN
}

enum ReleaseType {
  SINGLE
  ALBUM
  EP
}

enum ArtistRole {
  MAIN
  FEATURED
}

enum CreditRole {
  COMPOSER
  LYRICIST
  PRODUCER
  MIXER
  MASTERING
  VOCALIST
  INSTRUMENTALIST
  ARRANGER
  ENGINEER
}

model User {
  id        String   @id @default(cuid())
  name      String
  email     String   @unique
  password  String
  avatarUrl String?
  role      UserRole @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  playlists       Playlist[]
  playHistory     PlayHistory[]
  likedSongs      UserLikedSong[]
  likedAlbums     UserLikedAlbum[]
  likedPlaylists  UserLikedPlaylist[]
  followedArtists UserFollowedArtist[]

  @@index([email])
}

model Artist {
  id               String   @id @default(cuid())
  name             String
  slug             String   @unique
  bio              String?  @db.Text
  nationality      String?
  avatarUrl        String?
  bannerUrl        String?
  followerCount    Int      @default(0)
  monthlyListeners Int      @default(0)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  songs     SongArtist[]
  albums    Album[]
  genres    ArtistGenre[]
  followers UserFollowedArtist[]
  credits   Credit[]

  @@index([slug])
}

model Credit {
  id        String     @id @default(cuid())
  name      String
  role      CreditRole
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  songId   String
  song     Song    @relation(fields: [songId], references: [id], onDelete: Cascade)
  artistId String?
  artist   Artist? @relation(fields: [artistId], references: [id], onDelete: SetNull)

  @@unique([songId, name, role])
  @@index([songId])
  @@index([artistId])
}

model Song {
  id          String   @id @default(cuid())
  title       String
  slug        String   @unique
  lyrics      String?  @db.Text
  duration    Int
  playCount   Int      @default(0)
  likeCount   Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  isExplicit  Boolean  @default(false)
  audioUrl    String
  trackNumber Int      @default(1) // Position in the album

  credits      Credit[]
  album        Album           @relation(fields: [albumId], references: [id])
  albumId      String
  genres       SongGenre[]
  playlists    PlaylistSong[]
  playHistory  PlayHistory[]
  likedByUsers UserLikedSong[]
  artists      SongArtist[]

  @@index([slug])
  @@index([albumId])
}

model Album {
  id            String      @id @default(cuid())
  title         String
  description   String?     @db.Text
  slug          String      @unique
  releaseType   ReleaseType @default(ALBUM)
  releaseDate   DateTime?
  playCount     Int         @default(0)
  totalDuration Int         @default(0)
  songCount     Int         @default(0)
  likeCount     Int         @default(0)
  coverUrl      String?
  isExplicit    Boolean     @default(false)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  songs        Song[]
  artist       Artist           @relation(fields: [artistId], references: [id])
  artistId     String
  genres       AlbumGenre[]
  likedByUsers UserLikedAlbum[]

  @@index([slug])
}

model Playlist {
  id            String   @id @default(cuid())
  title         String
  description   String?  @db.Text
  slug          String   @unique
  isPublic      Boolean  @default(true)
  totalDuration Int      @default(0)
  playCount     Int      @default(0)
  songCount     Int      @default(0)
  likeCount     Int      @default(0)
  coverUrl      String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  user         User                @relation(fields: [userId], references: [id])
  userId       String
  likedByUsers UserLikedPlaylist[]
  songs        PlaylistSong[]

  @@index([slug])
  @@index([userId])
}

model Genre {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?  @db.Text
  slug        String   @unique
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  songCount   Int      @default(0)
  artistCount Int      @default(0)
  albumCount  Int      @default(0)

  albums  AlbumGenre[]
  artists ArtistGenre[]
  songs   SongGenre[]

  @@index([slug])
}

model PlayHistory {
  id            String   @id @default(cuid())
  playedAt      DateTime @default(now())
  playDuration  Int      @default(0)
  completedPlay Boolean  @default(false)
  sourceType    String? // Source of the play: Search, Playlist, Radio, Album...
  sourceId      String?
  deviceType    String?

  song   Song   @relation(fields: [songId], references: [id])
  songId String
  user   User   @relation(fields: [userId], references: [id])
  userId String

  @@index([userId, playedAt])
  @@index([songId])
}

model SongArtist {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())

  song     Song   @relation(fields: [songId], references: [id], onDelete: Cascade)
  songId   String
  artist   Artist @relation(fields: [artistId], references: [id], onDelete: Cascade)
  artistId String

  role  ArtistRole @default(MAIN)
  order Int        @default(1)

  @@unique([songId, artistId])
}

model PlaylistSong {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())

  playlist   Playlist @relation(fields: [playlistId], references: [id], onDelete: Cascade)
  playlistId String
  song       Song     @relation(fields: [songId], references: [id], onDelete: Cascade)
  songId     String
  order      Int

  @@unique([playlistId, songId])
}

model SongGenre {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())

  song    Song   @relation(fields: [songId], references: [id], onDelete: Cascade)
  songId  String
  genre   Genre  @relation(fields: [genreId], references: [id], onDelete: Cascade)
  genreId String

  @@unique([songId, genreId])
}

model AlbumGenre {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())

  album   Album  @relation(fields: [albumId], references: [id], onDelete: Cascade)
  albumId String
  genre   Genre  @relation(fields: [genreId], references: [id], onDelete: Cascade)
  genreId String

  @@unique([albumId, genreId])
}

model ArtistGenre {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())

  artist   Artist @relation(fields: [artistId], references: [id], onDelete: Cascade)
  artistId String
  genre    Genre  @relation(fields: [genreId], references: [id], onDelete: Cascade)
  genreId  String

  @@unique([artistId, genreId])
}

model UserLikedSong {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
  song   Song   @relation(fields: [songId], references: [id], onDelete: Cascade)
  songId String

  @@unique([userId, songId])
}

model UserLikedAlbum {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())

  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId  String
  album   Album  @relation(fields: [albumId], references: [id], onDelete: Cascade)
  albumId String

  @@unique([userId, albumId])
}

model UserLikedPlaylist {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())

  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  playlist   Playlist @relation(fields: [playlistId], references: [id], onDelete: Cascade)
  playlistId String

  @@unique([userId, playlistId])
}

model UserFollowedArtist {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())

  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId   String
  artist   Artist @relation(fields: [artistId], references: [id], onDelete: Cascade)
  artistId String

  @@unique([userId, artistId])
}
