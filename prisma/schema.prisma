// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/app/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  USER
  ADMIN
}

enum ReleaseType {
  SINGLE
  EP
  ALBUM
}

enum ArtistRole {
  MAIN_ARTIST
  FEATURED_ARTIST
}

enum CreditRole {
  PRODUCER
  LYRICIST
  COMPOSER
}

enum PlaylistType {
  USER
  EDITORIAL
  ALGORITHM
}

model User {
  id            String   @id @default(cuid())
  name          String
  slug          String   @unique
  email         String   @unique
  password      String
  imagePublicId String?
  role          UserRole @default(USER)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  playlists       Playlist[]
  playHistory     PlayHistory[]
  likedTracks     UserLikedTrack[]
  likedAlbums     UserLikedAlbum[]
  likedPlaylists  UserLikedPlaylist[]
  followedArtists UserFollowedArtist[]

  @@index([email])
}

model Artist {
  id             String   @id @default(cuid())
  name           String
  slug           String   @unique
  description    String?  @db.Text
  imagePublicId  String
  bannerPublicId String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  tracks    TrackArtist[]
  albums    Album[]
  followers UserFollowedArtist[]

  @@index([slug])
}

model Track {
  id            String           @id @default(cuid())
  title         String
  slug          String           @unique
  lyrics        String?          @db.Text
  duration      Int
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  isExplicit    Boolean          @default(false)
  audioPublicId String
  genres        TrackGenre[]
  trackNumber   Int
  credits       Credit[]
  album         Album            @relation(fields: [albumId], references: [id])
  albumId       String
  playlists     PlaylistTrack[]
  playHistory   PlayHistory[]
  likedByUsers  UserLikedTrack[]
  artists       TrackArtist[]

  @@index([slug])
  @@index([albumId])
}

model Album {
  id            String      @id @default(cuid())
  title         String
  description   String?     @db.Text
  slug          String      @unique
  releaseType   ReleaseType @default(SINGLE)
  releaseDate   DateTime    @default(now())
  coverPublicId String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  tracks       Track[]
  artist       Artist           @relation(fields: [artistId], references: [id])
  artistId     String
  likedByUsers UserLikedAlbum[]

  @@index([slug])
}

model Playlist {
  id          String   @id @default(cuid())
  title       String
  description String?  @db.Text
  slug        String   @unique
  isPublic    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user         User?               @relation(fields: [userId], references: [id])
  userId       String?
  type         PlaylistType        @default(USER)
  likedByUsers UserLikedPlaylist[]
  tracks       PlaylistTrack[]

  @@index([slug])
  @@index([userId])
}

model Genre {
  id        String   @id @default(cuid())
  name      String   @unique
  slug      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  tracks TrackGenre[]

  @@index([slug])
}

model Credit {
  id      String       @id @default(cuid())
  track   Track        @relation(fields: [trackId], references: [id])
  trackId String
  name    String
  roles   CreditRole[]

  @@index([trackId])
}

model PlayHistory {
  id            String   @id @default(cuid())
  playedAt      DateTime @default(now())
  playDuration  Int
  completedPlay Boolean  @default(false)
  sourceType    String? // Source of the play: Search, Playlist, Radio, Album...
  sourceId      String?
  deviceType    String?

  track   Track  @relation(fields: [trackId], references: [id])
  trackId String
  user    User   @relation(fields: [userId], references: [id])
  userId  String

  @@index([userId, playedAt])
  @@index([trackId])
}

model TrackGenre {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  track   Track  @relation(fields: [trackId], references: [id], onDelete: Cascade)
  trackId String
  genre   Genre  @relation(fields: [genreId], references: [id], onDelete: Cascade)
  genreId String
}

model TrackArtist {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  track    Track      @relation(fields: [trackId], references: [id], onDelete: Cascade)
  trackId  String
  artist   Artist     @relation(fields: [artistId], references: [id], onDelete: Cascade)
  artistId String
  role     ArtistRole @default(MAIN_ARTIST)

  @@unique([trackId, artistId])
}

model PlaylistTrack {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  playlist   Playlist @relation(fields: [playlistId], references: [id], onDelete: Cascade)
  playlistId String
  track      Track    @relation(fields: [trackId], references: [id], onDelete: Cascade)
  trackId    String
  order      Int

  @@unique([playlistId, trackId])
}

model UserLikedTrack {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId  String
  track   Track  @relation(fields: [trackId], references: [id], onDelete: Cascade)
  trackId String

  @@unique([userId, trackId])
}

model UserLikedAlbum {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId  String
  album   Album  @relation(fields: [albumId], references: [id], onDelete: Cascade)
  albumId String

  @@unique([userId, albumId])
}

model UserLikedPlaylist {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  playlist   Playlist @relation(fields: [playlistId], references: [id], onDelete: Cascade)
  playlistId String

  @@unique([userId, playlistId])
}

model UserFollowedArtist {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId   String
  artist   Artist @relation(fields: [artistId], references: [id], onDelete: Cascade)
  artistId String

  @@unique([userId, artistId])
}
